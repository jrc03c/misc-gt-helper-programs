-------------------------------------------------------------------------------
-- @jrc03c/dot
-------------------------------------------------------------------------------
-- url    : https://www.guidedtrack.com/programs/20504/edit
-- tests  : https://www.guidedtrack.com/programs/20505
-- author : Josh Castle (joshrcastle@gmail.com)
-------------------------------------------------------------------------------
-- inputs:
--     `a` = the left vector or matrix
--
--     `b` = the right vector or matrix
--
--     `should_transpose_a` = "yes" if you want `a` to be transposed before the
--         multiplication; defaults to "no" if undefined; is only applicable if
--         `a` is a matrix
--
--     `should_transpose_b` = "yes" if you want `a` to be transposed before the
--         multiplication; defaults to "no" if undefined; is only applicable if
--         `b` is a matrix
--
-- outputs:
--     `c` = the dot product of `a` and `b`
-------------------------------------------------------------------------------

------------------
-- BASIC CHECKS --
------------------

-- confirm that the relevant variables exist
*if: not a
	>> error_title = "@jrc03c/dot"
	>> error_message = "You must define a variable `a` that is a vector (i.e., a collection) or a matrix (i.e., a collection of collections)!"
	*program: @jrc03c/show-error

	>> c = ""
	*goto: clean-up

*if: not b
	>> error_title = "@jrc03c/dot"
	>> error_message = "You must define a variable `b` that is a vector (i.e., a collection) or a matrix (i.e., a collection of collections)!"
	*program: @jrc03c/show-error

	>> c = ""
	*goto: clean-up

*if: not should_transpose_a
	>> should_transpose_a = "no"

*if: not should_transpose_b
	>> should_transpose_b = "no"

-- confirm that `a` is either a vector or a matrix
>> vector = a
*program: @jrc03c/check-if-vector
>> a_is_a_vector = is_a_vector

>> matrix = a
*program: @jrc03c/check-if-matrix
>> a_is_a_matrix = is_a_matrix

*if: a_is_a_vector = "no" and a_is_a_matrix = "no"
	>> error_title = "@jrc03c/dot"
	>> error_message = "The variable `a` must be a vector (i.e., a collection) or a matrix (i.e., a collection of collections), but instead it was a(n) {a.type}!"
	*program: @jrc03c/show-error
	
	>> c = ""
	*goto: clean-up

-- confirm that `b` is either a vector or a matrix
>> vector = b
*program: @jrc03c/check-if-vector
>> b_is_a_vector = is_a_vector

>> matrix = b
*program: @jrc03c/check-if-matrix
>> b_is_a_matrix = is_a_matrix

*if: b_is_a_vector = "no" and b_is_a_matrix = "no"
	>> error_title = "@jrc03c/dot"
	>> error_message = "The variable `b` must be a vector (i.e., a collection) or a matrix (i.e., a collection of collections), but instead it was a(n) {b.type}!"
	*program: @jrc03c/show-error

	>> c = ""
	*goto: clean-up

-- confirm that the arrays contain only numbers
>> collection = a
*program: @jrc03c/contains-only-numbers

*if: contains_only_numbers = "no"
	>> error_title = "@jrc03c/dot"

	*if: a_is_a_vector = "yes"
		>> error_message = "The vector `a` should contain only numbers!"

	*if: a_is_a_matrix = "yes"
		>> error_message = "The matrix `a` should contain only numbers!"

	*program: @jrc03c/show-error

	>> c = ""
	*goto: clean-up

>> collection = b
*program: @jrc03c/contains-only-numbers

*if: contains_only_numbers = "no"
	>> error_title = "@jrc03c/dot"

	*if: b_is_a_vector = "yes"
		>> error_message = "The vector `b` should contain only numbers!"

	*if: b_is_a_matrix = "yes"
		>> error_message = "The matrix `b` should contain only numbers!"

	*program: @jrc03c/show-error

	>> c = ""
	*goto: clean-up

--------------------
-- TRANSPOSITIONS --
--------------------

-- if either variable is a matrix and needs to be transposed, then do that now
*if: a_is_a_matrix = "yes" and should_transpose_a = "yes"
	>> matrix_in = a
	*program: @jrc03c/matrix-transpose
	>> a = matrix_out

*if: b_is_a_matrix = "yes" and should_transpose_b = "yes"
	>> matrix_in = b
	*program: @jrc03c/matrix-transpose
	>> b = matrix_out

---------------------
-- VECTOR * VECTOR --
---------------------

*if: a_is_a_vector = "yes" and b_is_a_vector = "yes"
	*if: not (a.size = b.size)
		>> error_title = "@jrc03c/dot"
		>> error_message = "`a` and `b` are vectors of differing lengths! (a.size = {a.size}, b.size = {b.size})"
		*program: @jrc03c/show-error

		>> c = ""
		*goto: clean-up

	>> c = 0

	*for: i, a_value in a
		>> c = c + a_value * b[i]

	*goto: clean-up

---------------------
-- VECTOR * MATRIX --
---------------------

*if: a_is_a_vector = "yes" and b_is_a_matrix = "yes"
	*if: not (a.size = b[1].size)
		>> error_title = "@jrc03c/dot"
		>> error_message = "The length of `a` (a vector) doesn't match the row length of `b` (a matrix)! (a.size = {a.size}, b[1].size = {b[1].size})"
		*program: @jrc03c/show-error

		>> c = ""
		*goto: clean-up

	>> c = []

	*for: i, row in b
		>> c_temp = 0

		*for: j, val in row
			>> c_temp = c_temp + val * a[j]

		>> c.add(c_temp)

	*goto: clean-up

---------------------
-- MATRIX * VECTOR --
---------------------

*if: a_is_a_matrix = "yes" and b_is_a_vector = "yes"
	*if: not (a[1].size = b.size)
		>> error_title = "@jrc03c/dot"
		>> error_message = "The row length of `a` (a matrix) doesn't match the length of `b` (a vector)! (a[1].size = {a[1].size}, b.size = {b.size})"
		*program: @jrc03c/show-error

		>> c = ""
		*goto: clean-up

	>> c = []

	*for: i, row in a
		>> c_temp = 0

		*for: j, val in row
			>> c_temp = c_temp + val * b[j]

		>> c.add(c_temp)

	*goto: clean-up

---------------------
-- MATRIX * MATRIX --
---------------------

*if: a_is_a_matrix = "yes" and b_is_a_matrix = "yes"
	-- if the row sizes aren't compatible...
	*if: not (a[1].size = b[1].size)
		-- but if the tranposed row sizes would be compatible...
		*if: a[1].size = b.size
			-- and if we already transposed `b`, then warn the user that they needn't
			-- have asked us to transpose `b` in the first place
			*if: should_transpose_b = "yes"
				>> warning_title = "@jrc03c/dot"
				>> warning_message = "You asked us to transpose matrix `b`, but the shape of `b` was actually compatible with `a` in its original orientation!"
				*program: @jrc03c/show-warning

				>> matrix_in = b
				*program: @jrc03c/matrix-transpose
				>> b = matrix_out
				>> should_transpose_b = "no"

				*program: @jrc03c/dot
				*goto: clean-up

			-- or, if we didn't already transpose `b`, then throw an error
			*if: should_transpose_b = "no"
				>> error_title = "@jrc03c/dot"
				>> error_message = "The shapes of matrices `a` and `b` are not compatible! (`a` shape = ({a.size}, {a[1].size}), `b` shape = ({b.size}, {b[1].size}))"
				*program: @jrc03c/show-error

				>> c = ""
				*goto: clean-up

		-- otherwise, throw an error
		*if: not (a[1].size = b.size)
			>> error_title = "@jrc03c/dot"
			>> error_message = "The shapes of matrices `a` and `b` are not compatible! (`a` shape = ({a.size}, {a[1].size}), `b` shape = ({b.size}, {b[1].size}))"
			*program: @jrc03c/show-error
		
			>> c = ""
			*goto: clean-up

	>> c = []

	*for: i, a_row in a
		>> c_row = []

		*for: j, b_row in b
			>> c_temp = 0

			*for: k, a_value in a_row
				>> c_temp = c_temp + a_value * b_row[k]

			>> c_row.add(c_temp)

		>> c.add(c_row)

	*goto: clean-up

-------------------------------------------------------------------------------

*label: clean-up

>> a = ""
>> a_is_a_matrix = ""
>> a_is_a_vector = ""
>> a_row = ""
>> a_value = ""
>> b = ""
>> b_is_a_matrix = ""
>> b_is_a_vector = ""
>> b_row = ""
>> c_row = ""
>> c_temp = ""
>> error_message = ""
>> error_title = ""
>> i = ""
>> is_a_matrix = ""
>> is_a_vector = ""
>> j = ""
>> k = ""
>> matrix = ""
>> matrix_in = ""
>> matrix_out = ""
>> row = ""
>> should_transpose_a = ""
>> should_transpose_b = ""
>> val = ""
>> vector = ""
>> warning_message = ""
>> warning_title = ""